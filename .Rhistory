## Parse json
df <- content(response, as = "text", encoding = "UTF-8")
df <- fromJSON(df)
return(df)
} else{
# print("Error: Status code ", status_code(response))
return(NULL)
}
}
### Cargar datos
estados_situacion <- sb_get("https://apis.sb.gob.do/estadisticas",
"/estados/situacion/eif", "2016-01", "BM")
get_num_registros <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL, registros = NULL){
# base_url
base_url <- "https://apis.sb.gob.do/estadisticas/v2"
# API Key
api_key <- "b0f966428bde45dc913ffd59d88b9dc0"
response <- GET(paste0(base_url, end_point),
add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
tipoEntidad = tipo_entidad,
entidad = entidad),
encode = "json")
num_records <- fromJSON(headers(response)$`x-pagination`)$TotalRecords
return(as.character(num_records))
}
get_num_registros <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL, registros = NULL){
# base_url
base_url <- "https://apis.sb.gob.do/estadisticas/v2"
# API Key
api_key <- "377833a9f00844b0975025d5f2d2c544"
response <- GET(paste0(base_url, end_point),
add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
tipoEntidad = tipo_entidad,
entidad = entidad),
encode = "json")
num_records <- fromJSON(headers(response)$`x-pagination`)$TotalRecords
return(as.character(num_records))
}
sb_get <- function(base_url = "https://apis.sb.gob.do/estadisticas/v2",
end_point, periodo_inicial, periodo_final = NULL,
tipo_entidad = NULL,
entidad = NULL){
## get registros
registros <- get_num_registros(end_point = end_point,
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
entidad = entidad,
tipo_entidad = tipo_entidad)
## Api Key SB
api_key <- "377833a9f00844b0975025d5f2d2c544"
## Definir url & endpoint
base_url <- base_url
end_point <- end_point
## Get json
response <- GET(paste0(base_url, end_point),
add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
tipoEntidad = tipo_entidad,
entidad = entidad,
registros = registros),
encode = "json")
if (status_code(response) == 200 & registros != 0){
## Parse json
df <- content(response, as = "text", encoding = "UTF-8")
df <- fromJSON(df)
return(df)
} else{
# print("Error: Status code ", status_code(response))
return(NULL)
}
}
### Cargar datos
estados_situacion <- sb_get("https://apis.sb.gob.do/estadisticas",
"/estados/situacion/eif", "2016-01", "BM")
estados_situacion <- sb_get(end_point = "/estados/situacion/eif",
periodo_inicial = date, tipo_entidad = "BM")
library(tidyverse)
periodo_inicial <- '2021-07'
periodo_final <- '2024-01'
estados_situacion <- sb_get(end_point = "/estados/situacion/eif",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final
tipo_entidad = "BM")
periodo_inicial <- '2021-07'
periodo_final <- '2024-01'
estados_situacion <- sb_get(end_point = "/estados/situacion/eif",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final
tipo_entidad = "BM")
periodo_inicial <- '2021-07'
periodo_final <- '2024-01'
estados_situacion <- sb_get(end_point = "/estados/situacion/eif",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM")
View(estados_situacion)
View(estados_situacion)
estados_situacion <- sb_get(end_point = "/estados/resultados/eif",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM")
View(estados_situacion)
estados_situacion <- sb_get(end_point = "/captaciones/localidad",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM")
captaciones_por_localidad <- sb_get(end_point = "/solvencia/componentes",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM")
View(captaciones_por_localidad)
captaciones_por_localidad <- sb_get(end_point = "/solvencia/componentes",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM",
entidad= "ADEMI")
periodo_inicial <- '2021-07'
periodo_final <- '2024-01'
captaciones_por_localidad <- sb_get(end_point = "/solvencia/componentes",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM",
entidad= "ADEMI")
library(tidyverse)
library(httr)
library(jsonlite)
## Creacion de API KEY - https://medium.com/@SB-ESTUDIOS/c%C3%B3mo-registrarte-en-el-portal-de-apis-de-la-superintendencia-de-bancos-b8a59acf3f9a
## Referencia - https://medium.com/@SB-ESTUDIOS/usar-el-api-v2-de-estad%C3%ADstica-desde-python-y-r-857bf76fdf7f
get_num_registros <- function(api_key, end_point, periodo_inicial, periodo_final = NULL,
entidad = NULL, tipo_entidad = NULL, registros = NULL){
# base_url
base_url <- "https://apis.sb.gob.do/estadisticas/v2"
# API Key
api_key <- "377833a9f00844b0975025d5f2d2c544"
response <- GET(paste0(base_url, end_point),
add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
tipoEntidad = tipo_entidad,
entidad = entidad),
encode = "json")
num_records <- fromJSON(headers(response)$`x-pagination`)$TotalRecords
return(as.character(num_records))
}
sb_get <- function(base_url = "https://apis.sb.gob.do/estadisticas/v2",
end_point, periodo_inicial, periodo_final = NULL,
tipo_entidad = NULL,
entidad = NULL){
## get registros
registros <- get_num_registros(end_point = end_point,
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
entidad = entidad,
tipo_entidad = tipo_entidad)
## Api Key SB
api_key <- "377833a9f00844b0975025d5f2d2c544"
## Definir url & endpoint
base_url <- base_url
end_point <- end_point
## Get json
response <- GET(paste0(base_url, end_point),
add_headers("Ocp-Apim-Subscription-Key" = api_key),
query = list(
periodoInicial = periodo_inicial,
periodoFinal = periodo_final,
tipoEntidad = tipo_entidad,
entidad = entidad,
registros = registros),
encode = "json")
if (status_code(response) == 200 & registros != 0){
## Parse json
df <- content(response, as = "text", encoding = "UTF-8")
df <- fromJSON(df)
return(df)
} else{
# print("Error: Status code ", status_code(response))
return(NULL)
}
}
entidades <- c("ADEMI","BANESCO","BANRESERVAS","BDI","BHD",
"BLH","CARIBE","CITIBANK","LAFISE","POPULAR","PROMERICA",
"QIK BANCO DIGITAL","SANTA CRUZ","SCOTIABANK","TODOS","VIMENCA")
periodo_inicial <- '2021-07'
periodo_final <- '2024-01'
captaciones_por_localidad <- sb_get(end_point = "/solvencia/componentes",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM",
entidad= "ADEMI")
captaciones_por_localidad <- sb_get(end_point = "/estados/resultados/eif",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM",
entidad= "ADEMI")
captaciones_por_localidad <- sb_get(end_point = "/estados/resultados/eif",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM")
captaciones_por_localidad <- sb_get(end_point = "/estados/resultados/eif",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final, entidad = "POPULAR",
tipo_entidad = "BM")
captaciones_por_localidad <- sb_get(end_point = "/estados/resultados/eif",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final, entidad = "POPULAR",
tipo_entidad = "BM")
View(estados_situacion)
View(captaciones_por_localidad)
captaciones_por_localidad <- sb_get(end_point = "/indicadores/riesgo-credito",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM")
View(captaciones_por_localidad)
captaciones_por_localidad <- sb_get(end_point = "/captaciones/localidad"
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM")
captaciones_por_localidad <- sb_get(end_point = "/captaciones/localidad",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM")
captaciones_por_localidad <- sb_get(end_point = "/carteras/creditos/sectores-economicos",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM")
View(captaciones_por_localidad)
periodo_inicial <- '2023-01'
periodo_final <- '2024-01'
periodo_inicial <- '2023-01'
periodo_final <- '2024-01'
##Detalles de Estadisticas- https://desarrollador.sb.gob.do/api-details#api=estad-sticas-del-sistema-financiero-con-paginacion&operation=captacionesLocalidad
"/estados/resultados/eif" # Estado de resultados
"/estados/situacion/eif" #  Estados de situacion
"/indicadores/riesgo-credito" #Indicadores de Riesgo de Credito
"/solvencia/componentes" #Solvencia
"/captaciones/localidad" # Captaciones por localidad
"/carteras/creditos/sectores-economicos" #Creditos Sectores Economicos
creditos_sectores_economicos <- sb_get(end_point = "/captaciones/localidad",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM")
View(captaciones_por_localidad)
View(creditos_sectores_economicos)
captaciones_por_localidad  <- sb_get(end_point = "/captaciones/localidad",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM",
entidad = "POPULAR")
captaciones_por_localidad  <- sb_get(end_point = "/captaciones/localidad",
periodo_inicial = periodo_inicial,
periodo_final = periodo_final,
tipo_entidad = "BM",
entidad = "LAFISE")
View(captaciones_por_localidad)
##Importacion desde la WEB de un PDF
URL <- {
"https://cdn.bancentral.gov.do/documents/instrumentos-de-inversion/instrumentos-operaciones-de-mercado-abierto/documents/Resultados_Contraccion_Expansion.pdf?v=1648831730568"
}
PDF_Contraccion <- pdf_text(URL) %>% str_split("\n")
## Borrar primeras 21 lineas
for (i in 1:7) {
PDF_Contraccion[[i]] <- PDF_Contraccion[[i]][-1:-21]
}
View(PDF_Contraccion)
PDF_Contraccion <- str_squish(PDF_Contraccion)
PDF_Contraccion <- PDF_Contraccion %>% strsplit(split= "\\,\\s\\\"")
View(PDF_Contraccion)
## Quitar "c(\" al inicio de cada pagina
for(i in 1:length(PDF_Contraccion)) {
PDF_Contraccion[[i]][1] <- PDF_Contraccion[[i]][1] %>%
str_extract("(?<=c[:punct:]\\\").*")
}
for(i in 1:length(PDF_Contraccion)) {
for(j in 1:length(PDF_Contraccion[[i]])) {
PDF_Contraccion[[i]][j] <- PDF_Contraccion[[i]][j] %>%
stringr::str_extract(".*(?=\")")
}
}
View(PDF_Contraccion)
numbers_ex = list()
k=1
for(i in 1:length(PDF_Contraccion)) {
for(j in 1:length(PDF_Contraccion[[i]])){
numbers <- PDF_Contraccion[[i]][j] %>% str_extract("[:digit:]+.*")
numbers_df <- data.frame(numbers)
# need to figure out how to get a list of the numbers going!
while(k <= 10000) {
numbers_ex[[k]]<- numbers_df
k <- k+1
break
}
}
NH_numbers <- dplyr::bind_rows(numbers_ex)
}
View(PDF_Contraccion)
NH_numbers %>%
separate(numbers, c("A","B","C","D","E","F","G","H","I","J","K","L", "M", "N", "O", "P"), sep="\\s") -> NH_numbers
NH_numbers1 <- NH_numbers %>%
mutate(P = ifelse(str_detect(O, "%"), O, P),
O = ifelse(nchar(N) < 8, N, O),
N = ifelse(str_detect(M, "%"), N, M),
M = ifelse(str_detect(L, "%"), L, M),
L = ifelse(str_detect(L, "%"), K, L),
K = ifelse(str_detect(K, "%"), K, "-")) %>%
drop_na() #quitar fila con NA
View(NH_numbers1)
colnames(NH_numbers1)[1] <- "Fecha"
colnames(NH_numbers1)[7] <- "Ofertas Adjudicadas - Valor Nominal"
colnames(NH_numbers1)[10] <- "Ofertas Adjudicadas - Tasa de Rendimiento"
colnames(NH_numbers1)[12] <- "Overnight - Monto"
colnames(NH_numbers1)[13] <- "Overnight - Tasa de Interes"
colnames(NH_numbers1)[14] <- "Total Contraccion"
Contraccion_Monetaria <- NH_numbers1 %>%
select(Fecha, `Ofertas Adjudicadas - Valor Nominal`,
`Ofertas Adjudicadas - Tasa de Rendimiento`,
`Overnight - Monto`,
`Overnight - Tasa de Interes`,
`Total Contraccion`)
# Convertir "Fecha" a date
Contraccion_Monetaria <- Contraccion_Monetaria %>%
mutate(Fecha = as.Date(Fecha, "%d/%m/%Y"))
View(Contraccion_Monetaria)
Contraccion_Monetaria <- Contraccion_Monetaria %>%
mutate(`Ofertas Adjudicadas - Valor Nominal` = as.numeric(str_replace_all(`Ofertas Adjudicadas - Valor Nominal`,
",", "")),
`Ofertas Adjudicadas - Tasa de Rendimiento` = as.numeric(str_replace_all(`Ofertas Adjudicadas - Tasa de Rendimiento`,
"%", ""))/100,
`Overnight - Monto` = as.numeric(str_replace_all(`Overnight - Monto`, ",", "")),
`Overnight - Tasa de Interes` = as.numeric(str_replace_all(`Overnight - Tasa de Interes`,
"%", ""))/100,
`Total Contraccion` = as.numeric(str_replace_all(`Total Contraccion`,
",", "")),
`Tasa Contraccion Monetaria` = ((`Ofertas Adjudicadas - Valor Nominal`*`Ofertas Adjudicadas - Tasa de Rendimiento`)+
(`Overnight - Monto`*`Overnight - Tasa de Interes`))/`Total Contraccion`) %>%
filter(!is.na(`Total Contraccion`))
View(Contraccion_Monetaria)
library(pdftools)
library(httr)
library(readxl)
library(tidyverse)
library(pdftools)
library(httr)
library(readxl)
library(tidyverse)
library(pdftools)
##Importacion desde la WEB de un PDF
URL <- {
"https://cdn.bancentral.gov.do/documents/instrumentos-de-inversion/instrumentos-operaciones-de-mercado-abierto/documents/Resultados_Contraccion_Expansion.pdf?v=1648831730568"
}
PDF_Contraccion <- pdf_text(URL) %>% str_split("\n")
## Borrar primeras 21 lineas
for (i in 1:7) {
PDF_Contraccion[[i]] <- PDF_Contraccion[[i]][-1:-21]
}
## Separar cada valor
PDF_Contraccion <- str_squish(PDF_Contraccion)
## Sacar cada linea
PDF_Contraccion <- PDF_Contraccion %>% strsplit(split= "\\,\\s\\\"")
## Quitar "c(\" al inicio de cada pagina
for(i in 1:length(PDF_Contraccion)) {
PDF_Contraccion[[i]][1] <- PDF_Contraccion[[i]][1] %>%
str_extract("(?<=c[:punct:]\\\").*")
}
## Quitar \ al final de cada linea
for(i in 1:length(PDF_Contraccion)) {
for(j in 1:length(PDF_Contraccion[[i]])) {
PDF_Contraccion[[i]][j] <- PDF_Contraccion[[i]][j] %>%
stringr::str_extract(".*(?=\")")
}
}
numbers_ex = list()
k=1
for(i in 1:length(PDF_Contraccion)) {
for(j in 1:length(PDF_Contraccion[[i]])){
numbers <- PDF_Contraccion[[i]][j] %>% str_extract("[:digit:]+.*")
numbers_df <- data.frame(numbers)
# need to figure out how to get a list of the numbers going!
while(k <= 10000) {
numbers_ex[[k]]<- numbers_df
k <- k+1
break
}
}
NH_numbers <- dplyr::bind_rows(numbers_ex)
}
NH_numbers %>%
separate(numbers, c("A","B","C","D","E","F","G","H","I","J","K","L", "M", "N", "O", "P"), sep="\\s") -> NH_numbers
## Hacer cambios en las columnas
NH_numbers1 <- NH_numbers %>%
mutate(P = ifelse(str_detect(O, "%"), O, P),
O = ifelse(nchar(N) < 8, N, O),
N = ifelse(str_detect(M, "%"), N, M),
M = ifelse(str_detect(L, "%"), L, M),
L = ifelse(str_detect(L, "%"), K, L),
K = ifelse(str_detect(K, "%"), K, "-")) %>%
drop_na() #quitar fila con NA
# Definir nombres de cada columna
colnames(NH_numbers1)[1] <- "Fecha"
colnames(NH_numbers1)[7] <- "Ofertas Adjudicadas - Valor Nominal"
colnames(NH_numbers1)[10] <- "Ofertas Adjudicadas - Tasa de Rendimiento"
colnames(NH_numbers1)[12] <- "Overnight - Monto"
colnames(NH_numbers1)[13] <- "Overnight - Tasa de Interes"
colnames(NH_numbers1)[14] <- "Total Contraccion"
# Seleccionar columnas
Contraccion_Monetaria <- NH_numbers1 %>%
select(Fecha, `Ofertas Adjudicadas - Valor Nominal`,
`Ofertas Adjudicadas - Tasa de Rendimiento`,
`Overnight - Monto`,
`Overnight - Tasa de Interes`,
`Total Contraccion`)
# Convertir "Fecha" a date
Contraccion_Monetaria <- Contraccion_Monetaria %>%
mutate(Fecha = as.Date(Fecha, "%d/%m/%Y"))
# Convertir a numeric y dar formato
Contraccion_Monetaria <- Contraccion_Monetaria %>%
mutate(`Ofertas Adjudicadas - Valor Nominal` = as.numeric(str_replace_all(`Ofertas Adjudicadas - Valor Nominal`,
",", "")),
`Ofertas Adjudicadas - Tasa de Rendimiento` = as.numeric(str_replace_all(`Ofertas Adjudicadas - Tasa de Rendimiento`,
"%", ""))/100,
`Overnight - Monto` = as.numeric(str_replace_all(`Overnight - Monto`, ",", "")),
`Overnight - Tasa de Interes` = as.numeric(str_replace_all(`Overnight - Tasa de Interes`,
"%", ""))/100,
`Total Contraccion` = as.numeric(str_replace_all(`Total Contraccion`,
",", "")),
`Tasa Contraccion Monetaria` = ((`Ofertas Adjudicadas - Valor Nominal`*`Ofertas Adjudicadas - Tasa de Rendimiento`)+
(`Overnight - Monto`*`Overnight - Tasa de Interes`))/`Total Contraccion`) %>%
filter(!is.na(`Total Contraccion`))
View(Contraccion_Monetaria)
PDF_Contraccion <- pdf_text(URL) %>% str_split("\n")
View(PDF_Contraccion)
## Borrar primeras 21 lineas
for (i in 1:7) {
PDF_Contraccion[[i]] <- PDF_Contraccion[[i]][-1:-21]
}
PDF_Contraccion <- str_squish(PDF_Contraccion)
PDF_Contraccion <- PDF_Contraccion %>% strsplit(split= "\\,\\s\\\"")
for(i in 1:length(PDF_Contraccion)) {
PDF_Contraccion[[i]][1] <- PDF_Contraccion[[i]][1] %>%
str_extract("(?<=c[:punct:]\\\").*")
}
for(i in 1:length(PDF_Contraccion)) {
for(j in 1:length(PDF_Contraccion[[i]])) {
PDF_Contraccion[[i]][j] <- PDF_Contraccion[[i]][j] %>%
stringr::str_extract(".*(?=\")")
}
}
numbers_ex = list()
k=1
for(i in 1:length(PDF_Contraccion)) {
for(j in 1:length(PDF_Contraccion[[i]])){
numbers <- PDF_Contraccion[[i]][j] %>% str_extract("[:digit:]+.*")
numbers_df <- data.frame(numbers)
# need to figure out how to get a list of the numbers going!
while(k <= 10000) {
numbers_ex[[k]]<- numbers_df
k <- k+1
break
}
}
NH_numbers <- dplyr::bind_rows(numbers_ex)
}
NH_numbers %>%
separate(numbers, c("A","B","C","D","E","F","G","H","I","J","K","L", "M", "N", "O", "P"), sep="\\s") -> NH_numbers
NH_numbers1 <- NH_numbers %>%
mutate(P = ifelse(str_detect(O, "%"), O, P),
O = ifelse(nchar(N) < 8, N, O),
N = ifelse(str_detect(M, "%"), N, M),
M = ifelse(str_detect(L, "%"), L, M),
L = ifelse(str_detect(L, "%"), K, L),
K = ifelse(str_detect(K, "%"), K, "-")) %>%
drop_na() #quitar fila con NA
colnames(NH_numbers1)[1] <- "Fecha"
colnames(NH_numbers1)[7] <- "Ofertas Adjudicadas - Valor Nominal"
colnames(NH_numbers1)[10] <- "Ofertas Adjudicadas - Tasa de Rendimiento"
colnames(NH_numbers1)[12] <- "Overnight - Monto"
colnames(NH_numbers1)[13] <- "Overnight - Tasa de Interes"
colnames(NH_numbers1)[14] <- "Total Contraccion"
# Seleccionar columnas
Contraccion_Monetaria <- NH_numbers1 %>%
select(Fecha, `Ofertas Adjudicadas - Valor Nominal`,
`Ofertas Adjudicadas - Tasa de Rendimiento`,
`Overnight - Monto`,
`Overnight - Tasa de Interes`,
`Total Contraccion`)
# Convertir "Fecha" a date
Contraccion_Monetaria <- Contraccion_Monetaria %>%
mutate(Fecha = as.Date(Fecha, "%d/%m/%Y"))
Contraccion_Monetaria <- Contraccion_Monetaria %>%
mutate(`Ofertas Adjudicadas - Valor Nominal` = as.numeric(str_replace_all(`Ofertas Adjudicadas - Valor Nominal`,
",", "")),
`Ofertas Adjudicadas - Tasa de Rendimiento` = as.numeric(str_replace_all(`Ofertas Adjudicadas - Tasa de Rendimiento`,
"%", ""))/100,
`Overnight - Monto` = as.numeric(str_replace_all(`Overnight - Monto`, ",", "")),
`Overnight - Tasa de Interes` = as.numeric(str_replace_all(`Overnight - Tasa de Interes`,
"%", ""))/100,
`Total Contraccion` = as.numeric(str_replace_all(`Total Contraccion`,
",", "")),
`Tasa Contraccion Monetaria` = ((`Ofertas Adjudicadas - Valor Nominal`*`Ofertas Adjudicadas - Tasa de Rendimiento`)+
(`Overnight - Monto`*`Overnight - Tasa de Interes`))/`Total Contraccion`) %>%
filter(!is.na(`Total Contraccion`))
View(Contraccion_Monetaria)
