# Agregar la restricción de suma igual a 100%
portfolio.constraints <- add.constraint(portfolio.constraints,
type = "full_investment",
min_sum = 1,
max_sum = 1)
port_specLT <- add.constraint(port_specLT,
type = "full_investment",
min_sum = 1,
max_sum = 1)
port_specLT <- add.constraint(portfolio=port_specLT, type="weight_sum", min_sum=0, max_sum=0)
# Agregar la restricción de suma igual a 100%
port_specLT <- add.constraint(portfolio=port_specLT, type="weight_sum", min_sum=1, max_sum=1)
suppressPackageStartupMessages(library(quantmod))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(PerformanceAnalytics))
suppressPackageStartupMessages(library(PortfolioAnalytics))
retornos_mensuales_FAANG <- readRDS("Modulo #4- Creacion de Portafolio y Conclusion/Semana 7- Tidyquant y PorfolioAnalytics/retornos_mensuales_FAANG.rds")
#retornos_mensuales_FAANG <- readRDS("retornos_mensuales_FAANG.rds")
precios_FAANG_vect <- c("AMZN", "META", "NFLX", "GOOGL", "AAPL")
##Creamos el portafolio y las limitaciones a los pesos de cada una de las acciones
port_specLT <- portfolio.spec(assets= precios_FAANG_vect)
# port_specLT <- add.constraint(port_specLT, type="box",
#                               min=0,
#                               max=1)
# Agregar la restricción de suma igual a 100%
port_specLT <- add.constraint(portfolio=port_specLT, type="weight_sum", min_sum=1, max_sum=1)
##Especificamos los objetivos
port_specLT <- add.objective(port_specLT, type= "return", name="mean")
port_specLT <- add.objective(port_specLT, type="risk", name="StdDev")
LargeTech_opt_base <- optimize.portfolio.rebalancing(
R = retornos_mensuales_FAANG,
optimize_method =  "min_volatility",
portfolio =  port_specLT,
rebalance_on = "years",
training_period = 60,
rolling_window = 1,
trace= TRUE)
LargeTech_opt_base$opt_rebalancing$`2022-12-31`
sum(LargeTech_opt_base$opt_rebalancing$`2022-12-31`$data_summary$first)
LargeTech_opt_base <- optimize.portfolio.rebalancing(
R = retornos_mensuales_FAANG,
optimize_method =  "min_volatility",
portfolio =  port_specLT,
rebalance_on = "years",
training_period = 60,
rolling_window = 1)
LargeTech_opt_base <- optimize.portfolio.rebalancing(
R = retornos_mensuales_FAANG,
optimize_method =  "ROI",
portfolio =  port_specLT,
rebalance_on = "years",
training_period = 60,
rolling_window = 1)
LargeTech_opt_base$opt_rebalancing$`2020-12-31`
data(edhec)
View(edhec)
data(edhec)
R <- edhec[, 1:6]
colnames(R) <- c("CA", "CTAG", "DS", "EM", "EQMN", "ED")
funds <- colnames(R)
init <- portfolio.spec(assets=funds)
init <- add.constraint(portfolio=init, type="leverage",
+ min_sum=0.99, max_sum=1.01)
init <- add.constraint(portfolio=init, type="box", min=0.05, max=0.65)
data(edhec)
R <- edhec[, 1:6]
colnames(R) <- c("CA", "CTAG", "DS", "EM", "EQMN", "ED")
funds <- colnames(R)
init <- portfolio.spec(assets=funds)
init <- add.constraint(portfolio=init, type="leverage",
min_sum=0.99, max_sum=1.01)
init <- add.constraint(portfolio=init, type="box", min=0.05, max=0.65)
opt_maxret <- optimize.portfolio(R=R, portfolio=maxret,
optimize_method="ROI",
trace=TRUE)
maxret <- add.objective(portfolio=init, type="return", name="mean")
opt_maxret <- optimize.portfolio(R=R, portfolio=maxret,
optimize_method="ROI",
trace=TRUE)
opt_maxret
opt_maxret <- optimize.portfolio(R=R, portfolio=maxret,
optimize_method="ROI",
trace=TRUE,
rebalance_on = "years",
training_period = 60,
rolling_window = 1)
opt_maxret
opt_maxret$objective_measures
opt_maxret$opt_values
opt_maxret$portfolio$constraints
precios_FAANG_vect <- c("AMZN", "META", "NFLX", "GOOGL", "AAPL")
fecha_inicio <- "2015-01-01"
fecha_final <- "2023-06-01"
precios_FAANG <- getSymbols(
precios_FAANG_vect,
src= "yahoo",
from= fecha_inicio,
to=  fecha_final,
auto.assign =  TRUE,
warnings= FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge)
colnames(precios_FAANG) <- (precios_FAANG_vect)
retornos_mensuales_FAANG <- Return.calculate(precios_FAANG, method= "log")
View(retornos_mensuales_FAANG)
suppressPackageStartupMessages(library(quantmod))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(PerformanceAnalytics))
suppressPackageStartupMessages(library(PortfolioAnalytics))
precios_FAANG_vect <- c("AMZN", "META", "NFLX", "GOOGL", "AAPL")
fecha_inicio <- "2023-01-01"
fecha_final <- "2023-06-01"
precios_FAANG <- getSymbols(
precios_FAANG_vect,
src= "yahoo",
from= fecha_inicio,
to=  fecha_final,
auto.assign =  TRUE,
warnings= FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge)
colnames(precios_FAANG) <- (precios_FAANG_vect)
retornos_diarios_FAANG <- Return.calculate(precios_FAANG, method= "log")
precios_FAANG_vect <- c("AMZN", "META", "NFLX", "GOOGL", "AAPL")
fecha_inicio <- "2023-01-01"
fecha_final <- "2023-06-01"
precios_FAANG <- getSymbols(
precios_FAANG_vect,
src= "yahoo",
from= fecha_inicio,
to=  fecha_final,
auto.assign =  TRUE,
warnings= FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge)
colnames(precios_FAANG) <- (precios_FAANG_vect)
retornos_diarios_FAANG <- Return.calculate(precios_FAANG, method= "log")
init <- portfolio.spec(assets=precios_FAANG_vect)
init <- add.constraint(portfolio=init, type="box",
min_sum=0.99, max_sum=1.01)
precios_FAANG_vect <- c("AMZN", "META", "NFLX", "GOOGL", "AAPL")
fecha_inicio <- "2023-01-01"
fecha_final <- "2023-06-01"
precios_FAANG <- getSymbols(
precios_FAANG_vect,
src= "yahoo",
from= fecha_inicio,
to=  fecha_final,
auto.assign =  TRUE,
warnings= FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge)
colnames(precios_FAANG) <- (precios_FAANG_vect)
retornos_diarios_FAANG <- Return.calculate(precios_FAANG, method= "log")
init <- portfolio.spec(assets=precios_FAANG_vect)
init <- add.constraint(portfolio=init, type="leverage",
min_sum=0.99, max_sum=1.01)
init <- add.constraint(portfolio=init, type="box", min=0.05, max=0.65)
maxret <- add.objective(portfolio=init, type="return", name="mean")
suppressPackageStartupMessages(library(quantmod))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(PerformanceAnalytics))
suppressPackageStartupMessages(library(PortfolioAnalytics))
precios_FAANG_vect <- c("AMZN", "META", "NFLX", "GOOGL", "AAPL")
fecha_inicio <- "2023-01-01"
fecha_final <- "2023-06-01"
precios_FAANG <- getSymbols(
precios_FAANG_vect,
src= "yahoo",
from= fecha_inicio,
to=  fecha_final,
auto.assign =  TRUE,
warnings= FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge)
colnames(precios_FAANG) <- (precios_FAANG_vect)
retornos_diarios_FAANG <- Return.calculate(precios_FAANG, method= "log")
init <- portfolio.spec(assets=precios_FAANG_vect)
init <- add.constraint(portfolio=init, type="leverage",
min_sum=0.99, max_sum=1.01)
init <- add.constraint(portfolio=init, type="box", min=0.05, max=0.65)
maxret <- add.objective(portfolio=init, type="return", name="mean")
suppressPackageStartupMessages(library(quantmod))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(PerformanceAnalytics))
suppressPackageStartupMessages(library(PortfolioAnalytics))
precios_FAANG_vect <- c("AMZN", "META", "NFLX", "GOOGL", "AAPL")
fecha_inicio <- "2023-01-01"
fecha_final <- "2023-06-01"
precios_FAANG <- getSymbols(
precios_FAANG_vect,
src= "yahoo",
from= fecha_inicio,
to=  fecha_final,
auto.assign =  TRUE,
warnings= FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge)
colnames(precios_FAANG) <- (precios_FAANG_vect)
retornos_diarios_FAANG <- Return.calculate(precios_FAANG, method= "log")
init <- portfolio.spec(assets=precios_FAANG_vect)
init <- add.constraint(portfolio=init, type="leverage",
min_sum=0.99, max_sum=1.01)
init <- add.constraint(portfolio=init, type="box", min=0.05, max=0.65)
maxret <- add.objective(portfolio=init, type="return", name="mean")
opt_maxret <- optimize.portfolio(R=R, portfolio=maxret,
optimize_method="ROI",
trace=TRUE)
opt_maxret <- optimize.portfolio(R=retornos_diarios_FAANG, portfolio=maxret,
optimize_method="ROI",
trace=TRUE)
opt_maxret
opt_maxret <- optimize.portfolio.rebalancing(R=retornos_diarios_FAANG, portfolio=maxret,
optimize_method="ROI",
trace=TRUE,
rebalance_on = "years",
training_period = 60,
rolling_window = 1,
trace= TRUE)
opt_maxret <- optimize.portfolio.rebalancing(R=retornos_diarios_FAANG, portfolio=maxret,
optimize_method="ROI",
trace=TRUE,
rebalance_on = "years",
training_period = 60,
rolling_window = 1)
opt_maxret
suppressPackageStartupMessages(library(quantmod))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(PerformanceAnalytics))
suppressPackageStartupMessages(library(PortfolioAnalytics))
precios_FAANG_vect <- c("AMZN", "META", "NFLX", "GOOGL", "AAPL")
fecha_inicio <- "2023-01-01"
fecha_final <- "2023-06-01"
precios_FAANG <- getSymbols(
precios_FAANG_vect,
src= "yahoo",
from= fecha_inicio,
to=  fecha_final,
auto.assign =  TRUE,
warnings= FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge)
colnames(precios_FAANG) <- (precios_FAANG_vect)
retornos_diarios_FAANG <- Return.calculate(precios_FAANG, method= "log") %>% na.omit
init <- portfolio.spec(assets=precios_FAANG_vect)
init <- add.constraint(portfolio=init, type="leverage",
min_sum=0.99, max_sum=1.01)
init <- add.constraint(portfolio=init, type="box", min=0.05, max=0.65)
maxret <- add.objective(portfolio=init, type="return", name="mean")
opt_maxret <- optimize.portfolio.rebalancing(R=retornos_diarios_FAANG, portfolio=maxret,
optimize_method="ROI",
trace=TRUE,
rebalance_on = "years",
training_period = 60,
rolling_window = 1)
opt_maxret
opt_maxret
opt_maxret <- optimize.portfolio.rebalancing(R=retornos_diarios_FAANG, portfolio=maxret,
optimize_method="ROI",
trace=TRUE,
rebalance_on = "years",
training_period = 45,
rolling_window = 1)
opt_maxret
opt_maxret$opt_rebalancing$`2023-05-31`
suppressPackageStartupMessages(library(quantmod))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(PerformanceAnalytics))
suppressPackageStartupMessages(library(PortfolioAnalytics))
precios_FAANG_vect <- c("AMZN", "META", "NFLX", "GOOGL", "AAPL")
fecha_inicio <- "2015-01-01"
fecha_final <- "2023-06-01"
precios_FAANG <- getSymbols(
precios_FAANG_vect,
src= "yahoo",
from= fecha_inicio,
to=  fecha_final,
auto.assign =  TRUE,
warnings= FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge)
colnames(precios_FAANG) <- (precios_FAANG_vect)
retornos_diarios_FAANG <- Return.calculate(precios_FAANG, method= "log") %>% na.omit
init <- portfolio.spec(assets=precios_FAANG_vect)
init <- add.constraint(portfolio=init, type="leverage",
min_sum=0.99, max_sum=1.01)
init <- add.constraint(portfolio=init, type="box", min=0.05, max=0.65)
maxret <- add.objective(portfolio=init, type="return", name="mean")
opt_maxret <- optimize.portfolio.rebalancing(R=retornos_diarios_FAANG, portfolio=maxret,
optimize_method="ROI",
trace=TRUE,
rebalance_on = "years",
training_period = 45,
rolling_window = 1)
opt_maxret$opt_rebalancing$`2023-05-31`
opt_maxret$opt_rebalancing$`2023-05-31`
opt_maxret$opt_rebalancing$`2023-05-31`$weights
opt_maxret$opt_rebalancing$`2023-05-31`
opt_maxret$opt_rebalancing$`2023-05-31`$call
opt_maxret$opt_rebalancing$`2023-05-31`
opt_maxret$opt_rebalancing$`2023-05-31`$opt_values
opt_maxret$opt_rebalancing$`2023-05-31`$weights
chart.Weights(opt_maxret, main="Evolución de las Distribuciones de los\n Pesos de las Acciones Dado el Periodo de Rebalanceo")
opt_maxret <- optimize.portfolio.rebalancing(R=retornos_diarios_FAANG, portfolio=maxret,
optimize_method="ROI",
trace=TRUE,
rebalance_on = "years",
training_period = 360,
rolling_window = 1)
chart.Weights(opt_maxret, main="Evolución de las Distribuciones de los\n Pesos de las Acciones Dado el Periodo de Rebalanceo")
opt_maxret <- optimize.portfolio.rebalancing(R=retornos_diarios_FAANG, portfolio=maxret,
optimize_method="ROI",
trace=TRUE,
rebalance_on = "years",
training_period = 150,
rolling_window = 1)
chart.Weights(opt_maxret, main="Evolución de las Distribuciones de los\n Pesos de las Acciones Dado el Periodo de Rebalanceo")
chart.Weights(opt_maxret, main="Evolución de las Distribuciones de los\n Pesos de las Acciones Dado el Periodo de Rebalanceo")
opt_maxret <- optimize.portfolio.rebalancing(R=retornos_diarios_FAANG, portfolio=maxret,
optimize_method="ROI",
trace=TRUE,
rebalance_on = "years",
training_period = 400,
rolling_window = 1)
chart.Weights(opt_maxret, main="Evolución de las Distribuciones de los\n Pesos de las Acciones Dado el Periodo de Rebalanceo")
opt_maxret <- optimize.portfolio.rebalancing(R=retornos_diarios_FAANG, portfolio=maxret,
optimize_method="ROI",
trace=TRUE,
rebalance_on = "years",
training_period = 720,
rolling_window = 1)
chart.Weights(opt_maxret, main="Evolución de las Distribuciones de los\n Pesos de las Acciones Dado el Periodo de Rebalanceo")
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(quantmod))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(PerformanceAnalytics))
suppressPackageStartupMessages(library(PortfolioAnalytics))
precios_FAANG_vect <- c("AMZN", "META", "NFLX", "GOOGL", "AAPL")
fecha_inicio <- "2015-01-01"
fecha_final <- "2023-06-01"
precios_FAANG <- getSymbols(
precios_FAANG_vect,
src= "yahoo",
from= fecha_inicio,
to=  fecha_final,
auto.assign =  TRUE,
warnings= FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge)
colnames(precios_FAANG) <- (precios_FAANG_vect)
retornos_diarios_FAANG <- Return.calculate(precios_FAANG, method= "log") %>% na.omit
init <- add.constraint(portfolio=init, type="leverage",
min_sum=0.99, max_sum=1.01)
init <- add.constraint(portfolio=init, type="box", min=0.05, max=0.65)
##Objetivos del Portafolio, maximixacion del retorno basado en el promedio
maxret <- add.objective(portfolio=init, type="return", name="mean")
opt_maxret <- optimize.portfolio.rebalancing(R=retornos_diarios_FAANG, portfolio=maxret,
optimize_method="ROI",
trace=TRUE,
rebalance_on = "years",
training_period = 720,
rolling_window = 1)
chart.Weights(opt_maxret, main="Evolución de las Distribuciones de los\n Pesos de las Acciones Dado el Periodo de Rebalanceo")
720/12
720/280
suppressPackageStartupMessages(library(quantmod))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(PerformanceAnalytics))
suppressPackageStartupMessages(library(PortfolioAnalytics))
precios_FAANG_vect <- c("AMZN", "META", "NFLX", "GOOGL", "AAPL")
fecha_inicio <- "2015-01-01"
fecha_final <- "2023-06-01"
precios_FAANG <- getSymbols(
precios_FAANG_vect,
src= "yahoo",
from= fecha_inicio,
to=  fecha_final,
auto.assign =  TRUE,
warnings= FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge)
colnames(precios_FAANG) <- (precios_FAANG_vect)
View(precios_FAANG)
retornos_diarios_FAANG <- Return.calculate(precios_FAANG, method= "log") %>% na.omit
View(retornos_diarios_FAANG)
### Creacion de portafolio
?portfolio.spec()
### Creacion de portafolio
init <- portfolio.spec(assets = precios_FAANG_vect )
##Restricciones
init <- add.constraint(portfolio=init, type="box", min=0.05, max=0.65)
init <- add.constraint(portfolio=init, type="box", min=0.05, max=0.65)
init <- add.constraint(portfolio=init, type="leverage",
min_sum=0.99, max_sum=1.01)
View(init)
suppressPackageStartupMessages(library(quantmod))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(PerformanceAnalytics))
suppressPackageStartupMessages(library(PortfolioAnalytics))
precios_FAANG_vect <- c("AMZN", "META", "NFLX", "GOOGL", "AAPL")
fecha_inicio <- "2015-01-01"
fecha_final <- "2023-06-01"
precios_FAANG <- getSymbols(
precios_FAANG_vect,
src= "yahoo",
from= fecha_inicio,
to=  fecha_final,
auto.assign =  TRUE,
warnings= FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge)
colnames(precios_FAANG) <- (precios_FAANG_vect)
retornos_diarios_FAANG <- Return.calculate(precios_FAANG, method= "log") %>% na.omit
### Creacion de portafolio
init <- portfolio.spec(assets = precios_FAANG_vect )
##Restricciones
init <- add.constraint(portfolio=init, type="box", min=0.05, max=0.65)
init <- add.constraint(portfolio=init, type="leverage",
min_sum=0.99, max_sum=1.01)
##Objetivos del Portafolio, maximixacion del retorno basado en el promedio
maxret <- add.objective(portfolio=init, type="return", name="mean")
?add.constraint
opt_maxret <- optimize.portfolio.rebalancing(R=retornos_diarios_FAANG,
portfolio=maxret,
optimize_method="ROI",
trace=TRUE,
rebalance_on = "years",
training_period = 720,
rolling_window = 1)
opt_maxret$opt_rebalancing$`2017-12-29`
opt_maxret$opt_rebalancing$`2023-05-31`
opt_maxret$opt_rebalancing$`2023-05-31`$weights
chart.Weights(opt_maxret, main="Evolución de las Distribuciones de los\n Pesos de las Acciones Dado el Periodo de Rebalanceo")
knitr::opts_chunk$set(echo = TRUE)
vector_1 <- c(1,2,3,4,5,6)
vector_2 <- c(TRUE, FALSE, TRUE)
vector_3 <- c("mi", "nombre", "es", "andres")
vector_4 <- c(1,2, "andres")
secuencia <- seq(from=1, to=7, by=1)
secuencia
matriz_1 <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol= 3)
matriz_2 <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol= 3)
matriz_1 + matriz_2
matriz_logica <- matrix(c(TRUE, FALSE, TRUE, TRUE), nrow=2, ncol= 2)
matriz_logica
data_frame_1 <- data.frame(
nombre= c("andres", "jorge", "maria"),
edad= seq(from=31, to=33, by=1),
casado= c(TRUE, TRUE, FALSE)
)
data_frame_1
mi_primera_lista <- list(
matriz=  matriz_1,
data= data_frame_1,
vector=  vector_1,
otro_vector= vector_2
)
mi_primera_lista$matriz
mi_primera_lista[[4]]
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
valor_presente <- function(valor_futuro,  tasa_de_descuento, numero_periodos) {
pv <- valor_futuro / (1 + tasa_de_descuento)^numero_periodos
return(pv)
}
knitr::opts_chunk$set(echo = TRUE)
list.files("../../Semana 4- Casos Practicos/data/")
list.files(
path,
all.files = FALSE,
full.names = FALSE,
recursive = FALSE,
pattern = NULL
)
list.files(
"../../Semana 4- Casos Practicos/data/",
all.files = FALSE,
full.names = FALSE,
recursive = FALSE,
pattern = NULL
)
nombre_archivos_rds <- list.files("../../Semana 4- Casos Practicos/data/", pattern = "\\rds$")
print(nombre_archivos_rds)
list.files(
"../../Semana 4- Casos Practicos/data/",
all.files = FALSE,
full.names = FALSE,
recursive = FALSE,
pattern = NULL
)
nombre_archivos_rds <- list.files("../../Semana 4- Casos Practicos/data/", pattern = "\\.rds$")
print(nombre_archivos_rds)
list.files(
"../../Semana 4- Casos Practicos/data/",
all.files = FALSE,
full.names = FALSE,
recursive = FALSE,
pattern = NULL
)
nombre_archivos_rds <- list.files("../../Semana 4- Casos Practicos/data/", pattern = "\\.rds$")
print("---Archivos RDS---")
print(nombre_archivos_rds)
list.files(
"../../Semana 4- Casos Practicos/data/",
all.files = FALSE,
full.names = FALSE,
recursive = FALSE,
pattern = NULL
)
nombre_archivos_rds <- list.files("../../Semana 4- Casos Practicos/data/", pattern = "\\.rds$")
print("---Solo Archivos RDS---")
print(nombre_archivos_rds)
